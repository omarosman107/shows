{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/global/window.js","src/js/index.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","videojsThumbnails","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_interopDefault","ex","_typeof","videojs","ThumbnailHelpers","progressControl","mouseTime","el_","getElementsByClassName","style","display","_len","arguments","args","Array","_key","thumbnailClip","shift","Object","keys","map","singleThumbnail","property","hasOwnProperty","createThumbnails","thumbnailContent","pseudo","prop","getComputedStyle","currentStyle","width","parseFloat","clip","split","pageXOffset","x","y","pageYOffset","document","documentElement","scrollLeft","scrollTop","player","controlBar","addFakeActive","addClass","removeFakeActive","removeClass","on","wrap","createElement","className","thumbnailClips","thumbnailImg","src","time","id","arrow","thumbnailsHolder","timelineTime","thumbnailArrowDown","appendChild","left","right","onload","thumbnailWidth","naturalWidth","duration","el","pageMousePositionX","event","leftOffset","clientX","body","getBoundingClientRect","mouseLeftOffset","Math","floor","offsetLeft","innerHTML","seekBar","mouseTimeDisplay","attributes","value","pageMouseOffsetX","pageX","changedTouches","activeThumbnail","progresBarRightOffset","getVisibleWidth","halfWidth","leftValue","activeClip","clipNumber","max","getVideoDuration","getScrollOffset","progresBarPosition","getPageMousePositionX","findMouseLeftOffset","getMouseVideoTime","getActiveThumbnail","updateThumbnailTime","updateThumbnailSrc","updateThumbnailStyle","keepThumbnailInsidePlayer","updateThumbnailLeftStyle","moveListener","hideThumbnail","defaults","registerPlugin","plugin","prepareThumbnailsClips","videoTime","options","currentTime","currentIteration","thumbnailOffset","stepTime","spriteURL","spriteUrl","0","initializeThumbnails","thumbnailsClips","createThumbnailImg","createThumbnailTime","createThumbnailArrowDown","thumbnaislHolder","createThumbnaislHolder","mergeThumbnailElements","hidePlayerOnHoverTime","navigator","userAgent","toLowerCase","indexOf","suportAndroidEvents","centerThumbnailOverCursor","addThumbnailToPlayer","upadateOnHover","upadateOnHoverOut","onPlayerReady","thumbnails","_this","ready","mergeOptions","VERSION"],"mappings":"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","file":"/Users/mrajczakowski/Sites/videojs-thumbnails/dist/browser/videojs-thumbnails.min.js","sourceRoot":"","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","if (typeof window !== \"undefined\") {\n    module.exports = window;\n} else if (typeof global !== \"undefined\") {\n    module.exports = global;\n} else if (typeof self !== \"undefined\"){\n    module.exports = self;\n} else {\n    module.exports = {};\n}\n","'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar videojs = _interopDefault(require('video.js'));\nvar global = require('global');\n\nclass ThumbnailHelpers {\n\n  static hidePlayerOnHoverTime(progressControl) {\n    const mouseTime = progressControl.el_.getElementsByClassName('vjs-mouse-display')[0];\n\n    mouseTime.style.display = 'none';\n  }\n\n  static createThumbnails(...args) {\n    const thumbnailClip = args.shift() || {};\n\n    Object.keys(args).map((i) => {\n      const singleThumbnail = args[i];\n\n      Object.keys(singleThumbnail).map((property) => {\n        if (singleThumbnail.hasOwnProperty(property)) {\n          if (typeof singleThumbnail[property] === 'object') {\n            thumbnailClip[property] = ThumbnailHelpers.createThumbnails(thumbnailClip[property],\n                                                singleThumbnail[property]);\n          } else {\n            thumbnailClip[property] = singleThumbnail[property];\n          }\n        }\n        return thumbnailClip;\n      });\n      return thumbnailClip;\n    });\n    return thumbnailClip;\n  }\n\n  static getComputedStyle(thumbnailContent, pseudo) {\n    return (prop) => {\n      if (global.window.getComputedStyle) {\n        return global.window.getComputedStyle(thumbnailContent, pseudo)[prop];\n      }\n      return thumbnailContent.currentStyle[prop];\n    };\n  }\n\n  static getVisibleWidth(thumbnailContent, width) {\n    if (width) {\n      return parseFloat(width);\n    }\n\n    let clip = ThumbnailHelpers.getComputedStyle(thumbnailContent)('clip');\n\n    if (clip !== 'auto' && clip !== 'inherit') {\n      clip = clip.split(/(?:\\(|\\))/)[1].split(/(?:,| )/);\n      if (clip.length === 4) {\n        return (parseFloat(clip[1]) - parseFloat(clip[3]));\n      }\n    }\n    return 0;\n  }\n\n  static getScrollOffset() {\n    if (global.window.pageXOffset) {\n      return {\n        x: global.window.pageXOffset,\n        y: global.window.pageYOffset\n      };\n    }\n    return {\n      x: global.document.documentElement.scrollLeft,\n      y: global.document.documentElement.scrollTop\n    };\n  }\n\n  static suportAndroidEvents(player) {\n    // Android doesn't support :active and :hover on non-anchor and non-button elements\n    // so, we need to fake the :active selector for thumbnails to show up.\n    const progressControl = player.controlBar.progressControl;\n\n    const addFakeActive = () => {\n      progressControl.addClass('fake-active');\n    };\n\n    const removeFakeActive = () => {\n      progressControl.removeClass('fake-active');\n    };\n\n    progressControl.on('touchstart', addFakeActive);\n    progressControl.on('touchend', removeFakeActive);\n    progressControl.on('touchcancel', removeFakeActive);\n  }\n\n  static createThumbnaislHolder() {\n    const wrap = global.document.createElement('div');\n\n    wrap.className = 'vjs-thumbnail-holder';\n    return wrap;\n  }\n\n  static createThumbnailImg(thumbnailClips) {\n    const thumbnailImg = global.document.createElement('img');\n\n    thumbnailImg.src = thumbnailClips['0'].src;\n    thumbnailImg.className = 'vjs-thumbnail-img';\n    return thumbnailImg;\n  }\n\n  static createThumbnailTime() {\n    const time = global.document.createElement('div');\n\n    time.className = 'vjs-thumbnail-time';\n    time.id = 'vjs-time';\n    return time;\n  }\n\n  static createThumbnailArrowDown() {\n    const arrow = global.document.createElement('div');\n\n    arrow.className = 'vjs-thumbnail-arrow';\n    arrow.id = 'vjs-arrow';\n    return arrow;\n  }\n\n  static mergeThumbnailElements(thumbnailsHolder,\n                                thumbnailImg,\n                                timelineTime,\n                                thumbnailArrowDown) {\n\n    thumbnailsHolder.appendChild(thumbnailImg);\n    thumbnailsHolder.appendChild(timelineTime);\n    thumbnailsHolder.appendChild(thumbnailArrowDown);\n    return thumbnailsHolder;\n  }\n\n  static centerThumbnailOverCursor(thumbnailImg) {\n    // center the thumbnail over the cursor if an offset wasn't provided\n    if (!thumbnailImg.style.left && !thumbnailImg.style.right) {\n      thumbnailImg.onload = () => {\n        const thumbnailWidth = { width: -(thumbnailImg.naturalWidth / 2) };\n\n        thumbnailImg.style.left = `${thumbnailWidth}px`;\n      };\n    }\n  }\n\n  static getVideoDuration(player) {\n    let duration = player.duration();\n\n    player.on('durationchange', () => {\n      duration = player.duration();\n    });\n    return duration;\n  }\n\n  static addThumbnailToPlayer(progressControl, thumbnailsHolder) {\n    progressControl.el().appendChild(thumbnailsHolder);\n  }\n\n  static findMouseLeftOffset(pageMousePositionX, progressControl, pageXOffset, event) {\n    // find the page offset of the mouse\n    let leftOffset = pageMousePositionX || (event.clientX +\n                     global.document.body.scrollLeft + global.document.documentElement.scrollLeft);\n\n    // subtract the page offset of the positioned offset parent\n    leftOffset -= progressControl.el().\n                  getBoundingClientRect().left + pageXOffset;\n    return leftOffset;\n  }\n\n  static getMouseVideoTime(mouseLeftOffset, progressControl, duration) {\n    return Math.floor((mouseLeftOffset - progressControl.el().offsetLeft) /\n           progressControl.width() * duration);\n  }\n\n  static updateThumbnailTime(timelineTime, progressControl) {\n    timelineTime.innerHTML = (progressControl.seekBar.mouseTimeDisplay.\n                             el_.attributes['data-current-time'].value);\n  }\n\n  static getPageMousePositionX(event) {\n    let pageMouseOffsetX = event.pageX;\n\n    if (event.changedTouches) {\n      pageMouseOffsetX = event.changedTouches[0].pageX;\n    }\n    return pageMouseOffsetX;\n  }\n\n  static keepThumbnailInsidePlayer(thumbnailImg,\n                                   activeThumbnail,\n                                   thumbnailClips,\n                                   mouseLeftOffset,\n                                   progresBarRightOffset) {\n\n    const width = ThumbnailHelpers.getVisibleWidth(thumbnailImg, activeThumbnail.width ||\n                  thumbnailClips[0].width);\n\n    const halfWidth = width / 2;\n\n    // make sure that the thumbnail doesn't fall off the right side of\n    // the left side of the player\n    if ((mouseLeftOffset + halfWidth) > progresBarRightOffset) {\n      mouseLeftOffset -= (mouseLeftOffset + halfWidth) - progresBarRightOffset;\n    } else if (mouseLeftOffset < halfWidth) {\n      mouseLeftOffset = halfWidth;\n    }\n    return mouseLeftOffset;\n  }\n\n  static updateThumbnailLeftStyle(mouseLeftOffset, thumbnailsHolder) {\n    const leftValue = { mouseLeftOffset };\n\n    thumbnailsHolder.style.left = `${leftValue.mouseLeftOffset}px`;\n  }\n\n  static getActiveThumbnail(thumbnailClips, mouseTime) {\n    let activeClip = 0;\n\n    for (const clipNumber in thumbnailClips) {\n      if (mouseTime > clipNumber) {\n        activeClip = Math.max(activeClip, clipNumber);\n      }\n    }\n    return thumbnailClips[activeClip];\n  }\n\n  static updateThumbnailSrc(activeThumbnail, thumbnailImg) {\n    if (activeThumbnail.src && thumbnailImg.src !== activeThumbnail.src) {\n      thumbnailImg.src = activeThumbnail.src;\n    }\n  }\n\n  static updateThumbnailStyle(activeThumbnail, thumbnailImg) {\n    if (activeThumbnail.style && thumbnailImg.style !== activeThumbnail.style) {\n      ThumbnailHelpers.createThumbnails(thumbnailImg.style, activeThumbnail.style);\n    }\n  }\n\n  static moveListener(event,\n                      progressControl,\n                      thumbnailsHolder,\n                      thumbnailClips,\n                      timelineTime,\n                      thumbnailImg,\n                      player) {\n\n    const duration = ThumbnailHelpers.getVideoDuration(player);\n    const pageXOffset = ThumbnailHelpers.getScrollOffset().x;\n    const progresBarPosition = progressControl.el().\n                               getBoundingClientRect();\n\n    const progresBarRightOffset = (progresBarPosition.width ||\n                                   progresBarPosition.right) +\n                                   pageXOffset;\n\n    const pageMousePositionX = ThumbnailHelpers.getPageMousePositionX(event);\n\n    let mouseLeftOffset = ThumbnailHelpers.findMouseLeftOffset(pageMousePositionX,\n                                                               progressControl,\n                                                               pageXOffset,\n                                                               event);\n\n    const mouseTime = ThumbnailHelpers.getMouseVideoTime(mouseLeftOffset,\n                                                         progressControl,\n                                                         duration);\n\n    const activeThumbnail = ThumbnailHelpers.getActiveThumbnail(thumbnailClips,\n                                                                mouseTime);\n\n    ThumbnailHelpers.updateThumbnailTime(timelineTime, progressControl);\n\n    ThumbnailHelpers.updateThumbnailSrc(activeThumbnail, thumbnailImg);\n\n    ThumbnailHelpers.updateThumbnailStyle(activeThumbnail, thumbnailImg);\n\n    mouseLeftOffset = ThumbnailHelpers.keepThumbnailInsidePlayer(thumbnailImg,\n                                                activeThumbnail,\n                                                thumbnailClips,\n                                                mouseLeftOffset,\n                                                progresBarRightOffset);\n\n    ThumbnailHelpers.updateThumbnailLeftStyle(mouseLeftOffset, thumbnailsHolder);\n  }\n\n  static upadateOnHover(progressControl,\n                          thumbnailsHolder,\n                          thumbnailClips,\n                          timelineTime,\n                          thumbnailImg,\n                          player) {\n\n    // update the thumbnail while hovering\n    progressControl.on('mousemove', (event) => {\n      ThumbnailHelpers.moveListener(event,\n                                    progressControl,\n                                    thumbnailsHolder,\n                                    thumbnailClips,\n                                    timelineTime,\n                                    thumbnailImg,\n                                    player);\n    });\n    progressControl.on('touchmove', (event) => {\n      ThumbnailHelpers.moveListener(event,\n                                    progressControl,\n                                    thumbnailsHolder,\n                                    thumbnailClips,\n                                    timelineTime,\n                                    thumbnailImg);\n    });\n  }\n\n  static hideThumbnail(thumbnailsHolder) {\n    thumbnailsHolder.style.left = '-1000px';\n  }\n\n  static upadateOnHoverOut(progressControl, thumbnailsHolder, player) {\n\n    // move the placeholder out of the way when not hovering\n    progressControl.on('mouseout', (event) => {\n      ThumbnailHelpers.hideThumbnail(thumbnailsHolder);\n    });\n    progressControl.on('touchcancel', (event) => {\n      ThumbnailHelpers.hideThumbnail(thumbnailsHolder);\n    });\n    progressControl.on('touchend', (event) => {\n      ThumbnailHelpers.hideThumbnail(thumbnailsHolder);\n    });\n    player.on('userinactive', (event) => {\n      ThumbnailHelpers.hideThumbnail(thumbnailsHolder);\n    });\n  }\n}\n\n// Default options for the plugin.\nconst defaults = {};\n\n// Cross-compatibility for Video.js 5 and 6.\nconst registerPlugin = videojs.registerPlugin || videojs.plugin;\n// const dom = videojs.dom || videojs;\n\n/**\n * Function to invoke when the player is ready.\n *\n * This is a great place for your plugin to initialize itself. When this\n * function is called, the player will have its DOM and child components\n * in place.\n *\n * @function onPlayerReady\n * @param    {Player} player\n *           A Video.js player.\n * @param    {Object} [options={}]\n *           An object of options left to the plugin author to define.\n */\n\nconst prepareThumbnailsClips = (videoTime, options) => {\n\n  let currentTime = 0;\n  let currentIteration = 0;\n  let thumbnailOffset = 0;\n  const stepTime = options.stepTime;\n  const thumbnailWidth = options.width;\n  const spriteURL = options.spriteUrl;\n  const thumbnailClips = {\n    0: {\n      src: spriteURL,\n      style: {\n        left: (thumbnailWidth / 2 * -1) + 'px',\n        width: ((Math.floor(videoTime / stepTime) + 1) * thumbnailWidth) + 'px',\n        clip: 'rect(0,' + options.width + 'px,' + options.width + 'px, 0)'\n      }\n    }\n  };\n\n  while (currentTime <= videoTime) {\n    currentTime += stepTime;\n    thumbnailOffset = ++currentIteration * thumbnailWidth;\n    thumbnailClips[currentTime] = {\n      style: {\n        left: ((thumbnailWidth / 2 + thumbnailOffset) * -1) + 'px',\n        clip: 'rect(0, ' + (thumbnailWidth + thumbnailOffset) + 'px,' +\n              options.width + 'px, ' + thumbnailOffset + 'px)'\n      }\n    };\n  }\n  return thumbnailClips;\n};\n\nconst initializeThumbnails = (thumbnailsClips, player) => {\n\n  const thumbnailClips = ThumbnailHelpers.createThumbnails({}, defaults, thumbnailsClips);\n  const progressControl = player.controlBar.progressControl;\n  const thumbnailImg = ThumbnailHelpers.createThumbnailImg(thumbnailClips);\n  const timelineTime = ThumbnailHelpers.createThumbnailTime();\n  const thumbnailArrowDown = ThumbnailHelpers.createThumbnailArrowDown();\n  let thumbnaislHolder = ThumbnailHelpers.createThumbnaislHolder();\n\n  thumbnaislHolder = ThumbnailHelpers.mergeThumbnailElements(thumbnaislHolder,\n                                                             thumbnailImg,\n                                                             timelineTime,\n                                                             thumbnailArrowDown);\n  ThumbnailHelpers.hidePlayerOnHoverTime(progressControl);\n\n  if (global.window.navigator.userAgent.toLowerCase().indexOf('android') !== -1) {\n    ThumbnailHelpers.suportAndroidEvents();\n  }\n\n  ThumbnailHelpers.createThumbnails(thumbnailImg.style,\n                                    thumbnailClips['0'].style);\n\n  ThumbnailHelpers.centerThumbnailOverCursor(thumbnailImg);\n\n  ThumbnailHelpers.addThumbnailToPlayer(progressControl,\n                                        thumbnaislHolder);\n\n  ThumbnailHelpers.upadateOnHover(progressControl,\n                                  thumbnaislHolder,\n                                  thumbnailClips,\n                                  timelineTime,\n                                  thumbnailImg,\n                                  player);\n\n  ThumbnailHelpers.upadateOnHoverOut(progressControl,\n                                     thumbnaislHolder,\n                                     player);\n};\n\nconst onPlayerReady = (player, options) => {\n  player.on('loadedmetadata', (() => {\n    const thumbnailsClips = prepareThumbnailsClips(player.duration(), options);\n\n    initializeThumbnails(thumbnailsClips, player);\n  }));\n};\n/**\n * A video.js plugin.\n *\n * In the plugin function, the value of `this` is a video.js `Player`\n * instance. You cannot rely on the player being in a \"ready\" state here,\n * depending on how the plugin is invoked. This may or may not be important\n * to you; if not, remove the wait for \"ready\"!\n *\n * @function thumbnails\n * @param    {Object} [options={}]\n *           An object of options left to the plugin author to define.\n */\nconst thumbnails = function(options) {\n  this.ready(() => {\n    onPlayerReady(this, videojs.mergeOptions(defaults, options));\n  });\n};\n\n// Register the plugin with video.js.\nregisterPlugin('thumbnails', thumbnails);\n\n// Include the version number.\nthumbnails.VERSION = '__VERSION__';\n\nmodule.exports = thumbnails;\n"]}